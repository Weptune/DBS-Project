1. Post creation with multiple actions
If creating a post includes:

Inserting into POSTS

Logging in USER_ACTIVITY

Sending a notification

All of these should be done in one transaction

2. Liking a post
Add to POST_LIKES

Update like count in POSTS

Wrap both in a transaction to maintain consistency.

3. Commenting on a post
Insert into POST_COMMENTS

Maybe notify the post author

Again, wrap in a transaction.

eg transaction:
const oracledb = require('oracledb');

async function likePost(req, res) {
  const { postId, userId } = req.body;
  let connection;

  try {
    connection = await oracledb.getConnection();

    // Start transaction
    await connection.execute('BEGIN');

    // Insert like
    await connection.execute(
      `INSERT INTO post_likes (post_id, user_id) VALUES (:postId, :userId)`,
      [postId, userId]
    );

    // Update like count
    await connection.execute(
      `UPDATE posts SET like_count = like_count + 1 WHERE post_id = :postId`,
      [postId]
    );

    // Commit if both succeed
    await connection.commit();
    res.send({ message: 'Post liked!' });

  } catch (err) {
    if (connection) await connection.rollback();
    console.error('Transaction failed:', err);
    res.status(500).send({ error: 'Failed to like post.' });
  } finally {
    if (connection) await connection.close();
  }
}


